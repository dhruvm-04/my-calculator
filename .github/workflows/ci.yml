name: CI/CD pipeline

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  # Build stage: Installs base dependencies once.
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install Base Dependencies
        # Note: We install here, and implicitly reinstall in subsequent jobs to ensure freshness
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "✅ Dependencies installed successfully"

  # Test stage: Runs correctness checks.
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install Dependencies
        # Re-install dependencies to ensure the test environment is fully isolated and fresh.
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Unit Tests
        # Explicitly run unit tests only
        run: |
          echo "🧪 Running unit tests..."
          python -m pytest tests/unit/ -v --tb=short

      - name: Run Integration Tests
        # Explicitly run integration tests only
        run: |
          echo "🧪 Running integration tests..."
          python -m pytest tests/integration/ -v --tb=short

  # Coverage stage: Measures code coverage.
  coverage:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests with coverage and generate HTML report
        # Run all tests (unit + integration) to calculate total coverage
        run: |
          echo "📊 Checking test coverage..."
          python -m pytest tests/ --cov=src --cov-fail-under=80 --cov-report=term-missing --cov-report=html 

      - name: Upload coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: htmlcov

  # Repository quality (lint) stage: Enforces coding standards.
  lint:
    runs-on: ubuntu-latest
    needs: coverage
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install pylint
        run: |
          python -m pip install --upgrade pip
          pip install pylint

      - name: Run pylint and save report
        # Use python -m pylint
        run: |
          echo "🧐 Running pylint..."
          python -m pylint src/ --output-format=text > lint_report.txt || true
          echo "Saved lint report to lint_report.txt"
          
          # enforce threshold (set to 7.0 here)
          # Note: Shell commands (grep, awk, sed) are generally fine on ubuntu-latest runners.
          score_line=$(grep -E "rated at" lint_report.txt || true)
          score=$(echo "$score_line" | sed -n 's/.*rated at \([0-9.]*\)\/10.*/\1/p')
          echo "Pylint score: ${score:-not-found}"
          if [ -z "$score" ]; then echo "Could not determine pylint score"; exit 1; fi
          awk -v s="$score" 'BEGIN{ if (s+0 < 7.0) exit 1 }' || (echo "Pylint score $score is below threshold 7.0" && exit 1)

      - name: Upload lint report
        uses: actions/upload-artifact@v4
        with:
          name: lint-report
          path: lint_report.txt

  # Formatting stage: Ensures code style consistency.
  format:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install black
        run: |
          python -m pip install --upgrade pip
          pip install black

      - name: Check formatting with black (apply if fails)
        # Use python -m black
        run: |
          echo "💅 Checking formatting with black..."
          if ! python -m black src/ tests/ --check; then
            echo "Black formatting failed; applying fixes..."
            python -m black src/ tests/
          else
            echo "Black formatting OK"
          fi

      - name: Show black diff (if any)
        # Use python -m black
        run: python -m black src/ tests/ --diff || true

  # Security stage: Runs security checks.
  security:
    runs-on: ubuntu-latest
    needs: format
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit

      - name: Run bandit (json output)
        # Use python -m bandit
        run: |
          echo "🔒 Running bandit security scan..."
          rm -f security_report.json || true
          python -m bandit -r src/ -f json -o security_report.json || true

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security_report.json

  # Deployment stage: Creates the final artifact.
  deploy:
    runs-on: ubuntu-latest
    needs: security
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
        continue-on-error: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: "Simple package: compile, zip and upload"
        # Use python -m compileall
        run: |
          echo "📦 Creating simple deployment package..."
          rm -f deployment-package.zip || true
          python -m compileall -b -f src || true
          zip -r deployment-package.zip src artifacts README.md requirements.txt || true
          echo "Created deployment-package.zip"

      - name: Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: deployment-zip
          path: deployment-package.zip